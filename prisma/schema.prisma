// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// A user is someone that is registered on the platform. A user can be a Doctor, a Client, or both, but only a maximum of one of each.
model User {
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor?
  client    Client?
}

// A Doctor is a User that uses the platform in order to schedule and manage Appointments FOR their Patients. A Doctor can have many Patients, but only one Patient for each Client on the platform. They also have a list of Locations
model Doctor {
  id                String      @id @unique @default(uuid())
  user              User        @relation(fields: [userEmail], references: [email])
  userEmail         String      @unique
  doctorSpecialtyId String
  googleData        GoogleData?
  patients          Patient[]
  locations         Location[]
}

// A Location is a place where the Doctor can give Appointments. It is composed by a full address, which represents the physical location in the real world, and also an alias, which is a name that the Doctor can choose to call it for convenience (e.g. the address is "Rua Luís António Correia, nº 10, 6º frente, 4715-310, Braga", and the alias is simply "Braga"). There is a Location which is created and associated to each Doctor when creating an account, which is Online
model Location {
  id          String @id @default(uuid())
  address     String @default("")
  alias       String
  Doctor      Doctor @relation(fields: [doctorEmail], references: [userEmail])
  doctorEmail String

  @@index([doctorEmail])
}

// A DoctorSpecialty is a specialty that a Doctor practices and for which it can schedule Appointments on the platform. These are added manually to the platform and the User, when registering as a Doctor, can select one for themselves.
model DoctorSpecialty {
  id   String @id @unique @default(uuid())
  name String
}

// Data pertaining to the Google account of a given Doctor
model GoogleData {
  id           String     @id @unique @default(uuid())
  doctor       Doctor     @relation(fields: [doctorId], references: [id])
  doctorId     String     @unique
  refreshToken String
  calendars    Calendar[]
}

// A given Google calendar of a Doctor's GoogleData
model Calendar {
  id               String      @id @unique @default(uuid())
  googleCalendarId String
  isMediciCalendar Boolean     @default(false)
  GoogleData       GoogleData? @relation(fields: [googleDataId], references: [id])
  googleDataId     String?

  @@index([googleDataId])
}

// A Client is a User that uses the platform in order to schedule and manage Appointments WITH their Doctors. For every unique Doctor with whom a Client schedules an Appointment, a Patient related to the Client's User is created and associated with the Doctor. For this reason, a Client can have many Patients, one for each Doctor with whom they've had an Appointment.
model Client {
  user      User      @relation(fields: [userEmail], references: [email])
  userEmail String    @unique
  patients  Patient[]
}

// A Patient is an association of a Client with a Doctor. A Client can have many patients, and every Patient is related to a single Client and a single Doctor.
model Patient {
  id          String @unique @default(uuid())
  userEmail   String
  client      Client @relation(fields: [userEmail], references: [userEmail])
  ofDoctor    Doctor @relation(fields: [doctorEmail], references: [userEmail])
  doctorEmail String

  @@index([userEmail])
  @@index([doctorEmail])
}

// model Appointment {
//   id       String          @id @unique @default(uuid())
//   date     DateTime        @default(now())
//   type     AppointmentType @default(INVIDIVUAL)
//   duration Int             @default(6000) //60 minutes
//   location String          @default("")
// }

// enum AppointmentType {
//   INVIDIVUAL
//   COUPLES
// }

// model Client {
//   id      String     @id @unique @default(uuid())
//   type    ClientType @default(INDIVIDUAL)
//   name    String     @default("")
//   email   String     @default("")
//   phone   String     @default("")
//   address String     @default("")
// }

// enum ClientType {
//   INDIVIDUAL
//   COUPLES
// }
